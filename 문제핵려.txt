데이터 수정 후 바로 적용되지 않는 이유 
수정된 데이터를 바로 반영하려면 react의 상태업데이트 또는 react query의 캐시 업데이트가 필요
새로고침 후 반영된다는 것은 상태나 캐시가 즉시 업데이트되지 않기 때문


Data Cashing 
-반복적으로 엑세스되는 데이터를 빠르게 사용할 수 있도록 메모리를 일시적으로 저장하는 프로세스

사용 이유
성능 향상과 효율적인 리소스 사용을 위해

장점
1.속도 향상
-캐시 메모리는 ram과 같은 저장소에 위치해서 외부 서버에 접근하는 것보다 빠르게 엑세스
2.부하 감소
-반복적으로 요청되는 데이터를 캐시에 저장함으로써 서버로의 데이터 요청 수를 줄임
3.사용자 접근성 향상
-빠른 화면 전환

데이터 캐싱 구현에는 몇 가지 주의 사항이 있다.

캐시 일관성
: 캐시된 데이터는 원본 데이터와 동기화 되어야 한다.
즉, 캐시된 데이터가 오래되거나 변경되면, 업데이트 혹은 무효화해야 한다.

메모리 사용
: 캐싱은 추가적인 메모리를 사용하므로, 캐시 크기와 관리 전략에 대한 고려가 필요하다.

캐시 전략
: 어떤 데이터를 캐시에 저장할지, 얼마나 오래 저장할지, 언제 캐시를 무효화 할지 등의 정의가 필요하다.





aws ec2 가상컴퓨팅
vertur 가상컴퓨팅 => 리눅스 컴퓨터

nginx => 








배포 (deploy) - 

















